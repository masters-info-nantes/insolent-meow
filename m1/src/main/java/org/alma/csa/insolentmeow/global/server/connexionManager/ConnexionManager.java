package org.alma.csa.insolentmeow.global.server.connexionManager;

import org.alma.csa.insolentmeow.IContext;
import org.alma.csa.insolentmeow.component.Component;
import org.alma.csa.insolentmeow.global.server.connexionManager.database.port.DBQueryInPort;
import org.alma.csa.insolentmeow.global.server.connexionManager.database.port.DBQueryOutPort;
import org.alma.csa.insolentmeow.global.server.connexionManager.database.service.DBQueryInService;
import org.alma.csa.insolentmeow.global.server.connexionManager.database.service.DBQueryOutService;
import org.alma.csa.insolentmeow.global.server.connexionManager.request.port.ReceivedRequestPort;
import org.alma.csa.insolentmeow.global.server.connexionManager.request.port.ReceivedRequestResponsePort;
import org.alma.csa.insolentmeow.global.server.connexionManager.request.service.ReceivedRequestResponseService;
import org.alma.csa.insolentmeow.global.server.connexionManager.request.service.ReceivedRequestService;
import org.alma.csa.insolentmeow.global.server.connexionManager.security.port.SecurityCheckInPort;
import org.alma.csa.insolentmeow.global.server.connexionManager.security.port.SecurityCheckOutPort;
import org.alma.csa.insolentmeow.global.server.connexionManager.security.service.SecurityCheckInService;
import org.alma.csa.insolentmeow.global.server.connexionManager.security.service.SecurityCheckOutService;

public class ConnexionManager extends Component {

    DBQueryInPort dbQueryInPort;
    DBQueryOutPort dbQueryOutPort;
    DBQueryInService dbQueryInService;
    DBQueryOutService dbQueryOutService;
    ReceivedRequestPort receivedRequestPort;
    ReceivedRequestResponsePort receivedRequestResponsePort;
    ReceivedRequestService receivedRequestService;
    ReceivedRequestResponseService receivedRequestResponseService;
    SecurityCheckOutPort securityCheckOutPort;
    SecurityCheckInPort securityCheckInPort;
    SecurityCheckOutService securityCheckOutService;
    SecurityCheckInService securityCheckInService;

    public ConnexionManager(IContext context){
        super(context);
        dbQueryInPort = new DBQueryInPort();
            addRequiredPorts(dbQueryInPort);
            dbQueryInPort.setParent(this);
            this.getContext().declare(dbQueryInPort,"dbQueryInPort");
        dbQueryOutPort = new DBQueryOutPort();
            addProvidedPorts(dbQueryOutPort);
            dbQueryOutPort.setParent(this);
            this.getContext().declare(dbQueryOutPort,"dbQueryOutPort");
        dbQueryInService = new DBQueryInService();
            addRequiredServices(dbQueryInService);
            dbQueryInService.setParent(this);
        dbQueryOutService = new DBQueryOutService();
            addProvidedServices(dbQueryOutService);
            dbQueryOutService.setParent(this);
        receivedRequestPort = new ReceivedRequestPort();
            addRequiredPorts(receivedRequestPort);
            receivedRequestPort.setParent(this);
            this.getContext().declare(receivedRequestPort,"receivedRequestPort");
        receivedRequestResponsePort = new ReceivedRequestResponsePort();
            addProvidedPorts(receivedRequestResponsePort);
            receivedRequestResponsePort.setParent(this);
            this.getContext().declare(receivedRequestResponsePort,"receivedRequestResponsePort");
        receivedRequestService = new ReceivedRequestService();
            addRequiredServices(receivedRequestService);
            receivedRequestService.setParent(this);
        receivedRequestResponseService = new ReceivedRequestResponseService();
            addProvidedServices(receivedRequestResponseService);
            receivedRequestResponseService.setParent(this);
        securityCheckOutPort = new SecurityCheckOutPort();
            addProvidedPorts(securityCheckOutPort);
            securityCheckOutPort.setParent(this);
            this.getContext().declare(securityCheckOutPort,"securityCheckOutPort");
        securityCheckInPort = new SecurityCheckInPort();
            addRequiredPorts(securityCheckInPort);
            securityCheckInPort.setParent(this);
            this.getContext().declare(securityCheckInPort,"securityCheckInPort");
        securityCheckOutService = new SecurityCheckOutService();
            addProvidedServices(securityCheckOutService);
            securityCheckOutService.setParent(this);
        securityCheckInService = new SecurityCheckInService();
            addRequiredServices(securityCheckInService);
            securityCheckInService.setParent(this);
        dbQueryInPort.addService(dbQueryInService);
        dbQueryInService.addPort(dbQueryInPort);
        dbQueryOutPort.addService(dbQueryOutService);
        dbQueryOutService.addPort(dbQueryOutPort);
        receivedRequestPort.addService(receivedRequestService);
        receivedRequestService.addPort(receivedRequestPort);
        receivedRequestResponsePort.addService(receivedRequestResponseService);
        receivedRequestResponseService.addPort(receivedRequestResponsePort);
        securityCheckInPort.addService(securityCheckInService);
        securityCheckInService.addPort(securityCheckInPort);
        securityCheckOutPort.addService(securityCheckOutService);
        securityCheckOutService.addPort(securityCheckOutPort);
    }
}
